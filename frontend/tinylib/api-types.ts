// This file is auto-generated by TinyHind. DO NOT EDIT.

type WhereOperator = 'eq' | 'neq' | 'gt' | 'gte' | 'lt' | 'lte' | 'like';

type WhereClause<T extends keyof DbSchema> = {
    [K in keyof DbSchema[T]]?: Partial<Record<WhereOperator, DbSchema[T][K]>>;
};

type OrderByClause<T extends keyof DbSchema> = {
    [K in keyof DbSchema[T]]?: 'asc' | 'desc';
};

export interface Query<T extends keyof DbSchema> {
    from: T;
    select?: (keyof DbSchema[T])[];
    where?: WhereClause<T>;
    orderBy?: OrderByClause<T>;
    limit?: number;
    offset?: number;
}
export interface DbSchema {
  Users: {
    Id: number;
    name: string;
    email: string;
    age: number;
  };
  Items: {
    Id: number;
    Name: string;
    Weight: number;
    Stock: number;
    Price: number;
    Active: number;
  };
}
